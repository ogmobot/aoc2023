;; Run with
;;  orion day13.orn < input13.txt

;; Notes:
;;      `>=` and some related inequalities seem borked
;;      Attempting to call functions passed as arguments sometimes seems borked
;;      Literal negative numbers seem borked

(def filter (\ (list f)
    (match list
        ((Cons h t)
            (match (f h)
                (True (Cons h (filter t f)))
                (False (filter t f))))
        (Nil Nil))))

(def append (\ (xs ys)
    (match xs
        (Nil ys)
        ((Cons h t) (Cons h (append t ys))))))

(def zip-with (\ (xs ys f)
    (match xs
        (Nil Nil)
        ((Cons x xrest)
            (match ys
                (Nil Nil)
                ((Cons y yrest)
                    (Cons (f x y) (zip-with xrest yrest f))))))))

(def member? (\ (list elem)
    (match list
        (Nil False)
        ((Cons h t) (or (= h elem) (member? t elem))))))

(def intersection (\ (xs ys)
    (filter xs (\ (x) (member? ys x)))))

;; (foldl 0 + list) isn't cooperating
(def sum (\ (list)
    (match list
        (Nil 0)
        ((Cons x xs) (+ x (sum xs))))))

;; Flip across horizontal axis
(def flip-h (\ (grid row)
    (map grid
        (\ (entry)
            (match entry
                ((Cons (Cons r c) val)
                    (Cons (Cons (- (- (* 2 row) 1) r) c) val))
                (_
                    (panic "Entry in wrong format")))))))

;; Flip across vertical axis
(def flip-v (\ (grid col)
    (map grid
        (\ (entry)
            (match entry
                ((Cons (Cons r c) val)
                    (Cons (Cons r (- (- (* 2 col) 1) c)) val))
                (_
                    (panic "Entry in wrong format")))))))

(def lookup (\ (grid key-coord)
    (match grid
        ((Cons (Cons coord val) rest)
            (if (= coord key-coord)
                val
                (lookup rest key-coord)))
        (_ (panic "Lookup failed")))))

(def get-coords (\ (grid)
    (map
        grid
        (\ (x)
            (match x
                ((Cons coord val) coord)
                (_ (panic "get-coords failed")))))))

(def count-imperfections (\ (grid-a grid-b)
    (sum
        (map
            (intersection (get-coords grid-a) (get-coords grid-b))
            (\ (x) (if (= (lookup grid-a x) (lookup grid-b x)) 0 1))))))

(def gRID-WIDTH  (Cons 999999 (- 0 1)))
(def gRID-HEIGHT (Cons (- 0 1) 999999))
(def find-grid-width-slow (\ (grid)
    (length (filter grid
                    (\ (x)
                        (match x
                            ((Cons (Cons r c) val)
                                (= r 0))
                            (_ False)))))))
(def find-grid-height-slow (\ (grid)
    (length (filter grid
                    (\ (x)
                        (match x
                            ((Cons (Cons r c) val)
                                (= c 0))
                            (_ False)))))))
(def find-grid-width (\ (grid) (lookup grid gRID-WIDTH)))
(def find-grid-height (\ (grid) (lookup grid gRID-HEIGHT)))

(def find-axis-h (\ (grid target r)
    (if (= target (count-imperfections (flip-h grid r) grid))
        (* 100 r)
        (if (= (+ r 1) (find-grid-height grid))
            (- 0 999999)
            (find-axis-h grid target (+ r 1))))))

(def find-axis-v (\ (grid target c)
    (if (= target (count-imperfections (flip-v grid c) grid))
        c
        (if (= (+ c 1) (find-grid-width grid))
            (find-axis-h grid target 1)
            (find-axis-v grid target (+ c 1))))))

(def find-axis-score (\ (grid target)
    (find-axis-v grid target 1)))

(def make-row (\ (row-index s)
    (zip-with
        (range 0 (length s))
        s
        (\ (col-index c) (Cons (Cons row-index col-index) c)))))

(def 'impure get-remaining-grid (\ (row-index)
    (match (chars (getLine))
        (Nil Nil)
        ((Cons h t)
            (append (make-row row-index (Cons h t))
                    (get-remaining-grid (+ row-index 1)))))))

(def 'impure get-single-grid (\ ()
    ; If first line is blank, we are at end of input
    (match (chars (getLine))
        (Nil Nothing)
        ((Cons h t)
            (Just
                (append (make-row 0 (Cons h t))
                        (get-remaining-grid 1)))))))

(def 'impure get-grids (\ ()
    (match (get-single-grid)
        ((Just g) (Cons
            (append
                (Cons (Cons gRID-WIDTH (find-grid-width-slow g))
                      (Cons (Cons gRID-HEIGHT (find-grid-height-slow g)) Nil))
                g)
            (get-grids)))
        (Nothing Nil))))

(def 'impure main (\ () {
    (def 'impure grids (get-grids))
    ;; Takes about 35 minutes per part
    (print (sum (map grids (\ (g) (find-axis-score g 0)))))
    (print (sum (map grids (\ (g) (find-axis-score g 2)))))}))
